#!/usr/bin/env python3

from planning_project3.turtlebot import TurtleBot

from planning_project3.constants import CONSTANT
from planning_project3.traversal import Traversal
from planning_project3.node import Node

import cv2
import time
import math
import rospy


import roslaunch
import rospkg

import sys
import signal

def signal_handler(sig, frame):
    print("")
    print("bye bye!")
    sys.exit(0)


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    rospack = rospkg.RosPack()
    
    while (1):
        
        # startXCoord_m, startYCoord_m, startGoalThetha = (input("\nStart X, Y, Theta [Add Space in between the values]:")).split()
        startXCoord_m, startYCoord_m, startGoalThetha = 0, 0.5, 0
        startXCoord, startYCoord, startGoalThetha = int((float(startXCoord_m)) * 100), int((float(startYCoord_m)) * 100), int(startGoalThetha)
        
        CONSTANT.START_NODE = (startXCoord, startYCoord, startGoalThetha, None)
        
        objTraversal = Traversal()
        if objTraversal.canvaArea.isOutsideObstacleSpace(CONSTANT.START_NODE):
            # endXCoord_m, endYCoord_m = (input("End X and Y [Add Space in between the values]:")).split()
            endXCoord_m, endYCoord_m = 3.3, 0.5
            endXCoord, endYCoord = int((float(endXCoord_m)) * 100), int((float(endYCoord_m)) * 100)
            
            CONSTANT.GOAL_NODE = (endXCoord, endYCoord, 0, None)
            
            if (objTraversal.canvaArea.isOutsideObstacleSpace(CONSTANT.GOAL_NODE)):

                uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
                roslaunch.configure_logging(uuid)
                file_path = rospack.get_path('planning_project3') + "/launch/gazebo.launch"
                start_x = "x_pos:=" + str(startXCoord_m)
                start_y = "y_pos:=" + str(startYCoord_m)
                angle = "angle:=" + str(math.radians(startGoalThetha))
                end_x = "goal_x:=" + str(endXCoord_m)
                end_y = "goal_y:=" + str(endXCoord_m)
                launch = roslaunch.parent.ROSLaunchParent(uuid, [(file_path, (start_x, start_y, angle, end_x, end_y))])
                launch.start()
       
                # CONSTANT.WALL_CLEARANCE = int(input("What's the Clearance from the Mobile Robot:"))
                
                objTraversal.endNode = Node(CONSTANT.GOAL_NODE , None)
                objTraversal.startNode = Node(CONSTANT.START_NODE, None)
                            
                start_time = time.time()
                objTraversal.createNodeTree()
                objTraversal.backTrack() # backtracks the solution
                print(f"Total Nodes Searched:{len(objTraversal._closedList)}")
                print("--- %s seconds for finding the solution ---" % (time.time() - start_time))
                
                # VISUALIZATION PART
                # objTraversal.canvaArea.drawObstacles()
                # objTraversal.drawNodeTree() # draws the node tree after solution is found
                # objTraversal.drawSolution() # draws the solution

                actionsList = objTraversal.getSolution()
                turtlebot = TurtleBot()

                start = input("Start the robot in gazebo (y/n): ")
                if (start == 'y' or start == 'Y'):
                    try:
                        turtlebot.executeActions(actionsList)
                    except rospy.ROSInterruptException:
                        pass
                else:
                    pass

                # cv2.waitKey(0)
                quit()
            else:
                print("Invalid End Coordinates. Try Again.\n")
        else:
            print("Invalid Start Coordinates. Try Again.\n")
